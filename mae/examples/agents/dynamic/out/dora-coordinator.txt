2024-07-16T08:41:08.863172Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("input_task.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("receipt"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task_input"): Input { mapping: User(UserInputMapping { source: NodeId("task_input"), output: DataId("task") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "receipt.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/mnt/d/project/zzbc/Moxin-App-Engine/mae/examples/agents/dynamic"}: dora_coordinator::run: successfully spawned dataflow `0190bab3-dff9-723d-be77-21cd15fc285c`
2024-07-16T08:41:25.028650Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("input_task.py"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("receipt"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task_input"): Input { mapping: User(UserInputMapping { source: NodeId("task_input"), output: DataId("task") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "receipt.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/mnt/d/project/zzbc/Moxin-App-Engine/mae/examples/agents/dynamic"}: dora_coordinator::run: successfully spawned dataflow `0190bab4-1f21-731b-8507-11d3b25c82b4`
2024-07-16T09:03:14.360745Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("receipt"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task_input"): Input { mapping: User(UserInputMapping { source: NodeId("task_input"), output: DataId("task") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "receipt.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/mnt/d/project/zzbc/Moxin-App-Engine/mae/examples/agents/dynamic"}: dora_coordinator::run: successfully spawned dataflow `0190bac8-19b6-7fb8-93f4-7c1cc0d14822`
2024-07-16T09:05:09.021064Z  INFO dora_coordinator: successfully send stop dataflow `0190bac8-19b6-7fb8-93f4-7c1cc0d14822` to all daemons
2024-07-16T09:06:02.490033Z  INFO dora_coordinator: Received destroy command
2024-07-16T09:06:02.490570Z  INFO dora_coordinator: successfully destroyed daemon ``
2024-07-16T09:06:02.490753Z  INFO dora_coordinator: stopped
2024-07-16T09:06:10.590030Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("receipt"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task_input"): Input { mapping: User(UserInputMapping { source: NodeId("task_input"), output: DataId("task") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "receipt.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/mnt/d/project/zzbc/Moxin-App-Engine/mae/examples/agents/dynamic"}: dora_coordinator::run: successfully spawned dataflow `0190baca-ca1b-73d8-a3d2-c1a34d9bb937`
2024-07-16T09:15:17.393373Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("keyword_extractor"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("task_input"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("keywords")}, source: Python(PythonSource { source: "keyword_extractor.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("paper_downloader_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("keywords"): Input { mapping: User(UserInputMapping { source: NodeId("keyword_extractor"), output: DataId("keywords") }), queue_size: None }}, outputs: {DataId("papers_info")}, source: Python(PythonSource { source: "paper_downloader_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("paper_analyze_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("papers_info"): Input { mapping: User(UserInputMapping { source: NodeId("paper_downloader_agent"), output: DataId("papers_info") }), queue_size: None }}, outputs: {DataId("paper_analyze_result")}, source: Python(PythonSource { source: "paper_analyze_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("report_writer_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("paper_analyze_result"): Input { mapping: User(UserInputMapping { source: NodeId("paper_analyze_agent"), output: DataId("paper_analyze_result") }), queue_size: None }}, outputs: {DataId("writer_report")}, source: Python(PythonSource { source: "report_writer_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("feedback_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("writer_report"): Input { mapping: User(UserInputMapping { source: NodeId("report_writer_agent"), output: DataId("writer_report") }), queue_size: None }}, outputs: {DataId("feedback_result")}, source: Python(PythonSource { source: "feedback_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("refinement_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("feedback_result"): Input { mapping: User(UserInputMapping { source: NodeId("feedback_agent"), output: DataId("feedback_result") }), queue_size: None }}, outputs: {DataId("refinement_result")}, source: Python(PythonSource { source: "refinement_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("evaluation_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("refinement_result"): Input { mapping: User(UserInputMapping { source: NodeId("refinement_agent"), output: DataId("refinement_result") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "evaluation_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/mnt/d/project/zzbc/Moxin-App-Engine/mae/examples/agents/super_agent/paper"}: dora_coordinator::run: successfully spawned dataflow `0190bad3-21fc-78fe-bbb5-6ff74691e8e9`
2024-07-16T09:18:59.464678Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("keyword_extractor"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("task_input"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("keywords")}, source: Python(PythonSource { source: "keyword_extractor.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("paper_downloader_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("keywords"): Input { mapping: User(UserInputMapping { source: NodeId("keyword_extractor"), output: DataId("keywords") }), queue_size: None }}, outputs: {DataId("papers_info")}, source: Python(PythonSource { source: "paper_downloader_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("paper_analyze_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("papers_info"): Input { mapping: User(UserInputMapping { source: NodeId("paper_downloader_agent"), output: DataId("papers_info") }), queue_size: None }}, outputs: {DataId("paper_analyze_result")}, source: Python(PythonSource { source: "paper_analyze_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("report_writer_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("paper_analyze_result"): Input { mapping: User(UserInputMapping { source: NodeId("paper_analyze_agent"), output: DataId("paper_analyze_result") }), queue_size: None }}, outputs: {DataId("writer_report")}, source: Python(PythonSource { source: "report_writer_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("feedback_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("writer_report"): Input { mapping: User(UserInputMapping { source: NodeId("report_writer_agent"), output: DataId("writer_report") }), queue_size: None }}, outputs: {DataId("feedback_result")}, source: Python(PythonSource { source: "feedback_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("refinement_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("feedback_result"): Input { mapping: User(UserInputMapping { source: NodeId("feedback_agent"), output: DataId("feedback_result") }), queue_size: None }}, outputs: {DataId("refinement_result")}, source: Python(PythonSource { source: "refinement_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("evaluation_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("refinement_result"): Input { mapping: User(UserInputMapping { source: NodeId("refinement_agent"), output: DataId("refinement_result") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "evaluation_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/mnt/d/project/zzbc/Moxin-App-Engine/mae/examples/agents/super_agent/paper"}: dora_coordinator::run: successfully spawned dataflow `0190bad6-8570-7943-8ecc-cea74afbc40a`
2024-07-16T09:21:52.758160Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("keyword_extractor"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("task_input"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("keywords")}, source: Python(PythonSource { source: "keyword_extractor.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("paper_downloader_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("keywords"): Input { mapping: User(UserInputMapping { source: NodeId("keyword_extractor"), output: DataId("keywords") }), queue_size: None }}, outputs: {DataId("papers_info")}, source: Python(PythonSource { source: "paper_downloader_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("paper_analyze_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("papers_info"): Input { mapping: User(UserInputMapping { source: NodeId("paper_downloader_agent"), output: DataId("papers_info") }), queue_size: None }}, outputs: {DataId("paper_analyze_result")}, source: Python(PythonSource { source: "paper_analyze_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("report_writer_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("paper_analyze_result"): Input { mapping: User(UserInputMapping { source: NodeId("paper_analyze_agent"), output: DataId("paper_analyze_result") }), queue_size: None }}, outputs: {DataId("writer_report")}, source: Python(PythonSource { source: "report_writer_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("feedback_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("writer_report"): Input { mapping: User(UserInputMapping { source: NodeId("report_writer_agent"), output: DataId("writer_report") }), queue_size: None }}, outputs: {DataId("feedback_result")}, source: Python(PythonSource { source: "feedback_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("refinement_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("feedback_result"): Input { mapping: User(UserInputMapping { source: NodeId("feedback_agent"), output: DataId("feedback_result") }), queue_size: None }}, outputs: {DataId("refinement_result")}, source: Python(PythonSource { source: "refinement_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("evaluation_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("refinement_result"): Input { mapping: User(UserInputMapping { source: NodeId("refinement_agent"), output: DataId("refinement_result") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "evaluation_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/mnt/d/project/zzbc/Moxin-App-Engine/mae/examples/agents/super_agent/paper"}: dora_coordinator::run: successfully spawned dataflow `0190bad9-2a0e-7f62-ac41-55ceb0a8a764`
2024-07-16T09:22:10.181977Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("keyword_extractor"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("task_input"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("keywords")}, source: Python(PythonSource { source: "keyword_extractor.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("paper_downloader_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("keywords"): Input { mapping: User(UserInputMapping { source: NodeId("keyword_extractor"), output: DataId("keywords") }), queue_size: None }}, outputs: {DataId("papers_info")}, source: Python(PythonSource { source: "paper_downloader_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("paper_analyze_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("papers_info"): Input { mapping: User(UserInputMapping { source: NodeId("paper_downloader_agent"), output: DataId("papers_info") }), queue_size: None }}, outputs: {DataId("paper_analyze_result")}, source: Python(PythonSource { source: "paper_analyze_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("report_writer_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("paper_analyze_result"): Input { mapping: User(UserInputMapping { source: NodeId("paper_analyze_agent"), output: DataId("paper_analyze_result") }), queue_size: None }}, outputs: {DataId("writer_report")}, source: Python(PythonSource { source: "report_writer_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("feedback_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("writer_report"): Input { mapping: User(UserInputMapping { source: NodeId("report_writer_agent"), output: DataId("writer_report") }), queue_size: None }}, outputs: {DataId("feedback_result")}, source: Python(PythonSource { source: "feedback_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("refinement_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("feedback_result"): Input { mapping: User(UserInputMapping { source: NodeId("feedback_agent"), output: DataId("feedback_result") }), queue_size: None }}, outputs: {DataId("refinement_result")}, source: Python(PythonSource { source: "refinement_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("evaluation_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("refinement_result"): Input { mapping: User(UserInputMapping { source: NodeId("refinement_agent"), output: DataId("refinement_result") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "evaluation_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/mnt/d/project/zzbc/Moxin-App-Engine/mae/examples/agents/super_agent/paper"}: dora_coordinator::run: successfully spawned dataflow `0190bad9-6e65-7302-a64e-01f7a3aad808`
2024-07-16T09:24:22.963776Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("keyword_extractor"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("task_input"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("keywords")}, source: Python(PythonSource { source: "keyword_extractor.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("paper_downloader_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("keywords"): Input { mapping: User(UserInputMapping { source: NodeId("keyword_extractor"), output: DataId("keywords") }), queue_size: None }}, outputs: {DataId("papers_info")}, source: Python(PythonSource { source: "paper_downloader_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("paper_analyze_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("papers_info"): Input { mapping: User(UserInputMapping { source: NodeId("paper_downloader_agent"), output: DataId("papers_info") }), queue_size: None }}, outputs: {DataId("paper_analyze_result")}, source: Python(PythonSource { source: "paper_analyze_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("report_writer_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("paper_analyze_result"): Input { mapping: User(UserInputMapping { source: NodeId("paper_analyze_agent"), output: DataId("paper_analyze_result") }), queue_size: None }}, outputs: {DataId("writer_report")}, source: Python(PythonSource { source: "report_writer_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("feedback_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("writer_report"): Input { mapping: User(UserInputMapping { source: NodeId("report_writer_agent"), output: DataId("writer_report") }), queue_size: None }}, outputs: {DataId("feedback_result")}, source: Python(PythonSource { source: "feedback_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("refinement_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("feedback_result"): Input { mapping: User(UserInputMapping { source: NodeId("feedback_agent"), output: DataId("feedback_result") }), queue_size: None }}, outputs: {DataId("refinement_result")}, source: Python(PythonSource { source: "refinement_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("evaluation_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("refinement_result"): Input { mapping: User(UserInputMapping { source: NodeId("refinement_agent"), output: DataId("refinement_result") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "evaluation_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/mnt/d/project/zzbc/Moxin-App-Engine/mae/examples/agents/super_agent/paper"}: dora_coordinator::run: successfully spawned dataflow `0190badb-7513-7772-8395-5d81514f8803`
2024-07-16T09:25:03.106131Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("keyword_extractor"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("task_input"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("keywords")}, source: Python(PythonSource { source: "keyword_extractor.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("paper_downloader_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("keywords"): Input { mapping: User(UserInputMapping { source: NodeId("keyword_extractor"), output: DataId("keywords") }), queue_size: None }}, outputs: {DataId("papers_info")}, source: Python(PythonSource { source: "paper_downloader_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("paper_analyze_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("papers_info"): Input { mapping: User(UserInputMapping { source: NodeId("paper_downloader_agent"), output: DataId("papers_info") }), queue_size: None }}, outputs: {DataId("paper_analyze_result")}, source: Python(PythonSource { source: "paper_analyze_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("report_writer_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("paper_analyze_result"): Input { mapping: User(UserInputMapping { source: NodeId("paper_analyze_agent"), output: DataId("paper_analyze_result") }), queue_size: None }}, outputs: {DataId("writer_report")}, source: Python(PythonSource { source: "report_writer_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("feedback_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("writer_report"): Input { mapping: User(UserInputMapping { source: NodeId("report_writer_agent"), output: DataId("writer_report") }), queue_size: None }}, outputs: {DataId("feedback_result")}, source: Python(PythonSource { source: "feedback_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("refinement_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("feedback_result"): Input { mapping: User(UserInputMapping { source: NodeId("feedback_agent"), output: DataId("feedback_result") }), queue_size: None }}, outputs: {DataId("refinement_result")}, source: Python(PythonSource { source: "refinement_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("evaluation_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("refinement_result"): Input { mapping: User(UserInputMapping { source: NodeId("refinement_agent"), output: DataId("refinement_result") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "evaluation_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/mnt/d/project/zzbc/Moxin-App-Engine/mae/examples/agents/super_agent/paper"}: dora_coordinator::run: successfully spawned dataflow `0190badc-11ed-741b-8952-571323ad91a9`
2024-07-16T09:26:17.676628Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("keyword_extractor"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("task_input"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("keywords")}, source: Python(PythonSource { source: "keyword_extractor.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("paper_downloader_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("keywords"): Input { mapping: User(UserInputMapping { source: NodeId("keyword_extractor"), output: DataId("keywords") }), queue_size: None }}, outputs: {DataId("papers_info")}, source: Python(PythonSource { source: "paper_downloader_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("paper_analyze_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("papers_info"): Input { mapping: User(UserInputMapping { source: NodeId("paper_downloader_agent"), output: DataId("papers_info") }), queue_size: None }}, outputs: {DataId("paper_analyze_result")}, source: Python(PythonSource { source: "paper_analyze_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("report_writer_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("paper_analyze_result"): Input { mapping: User(UserInputMapping { source: NodeId("paper_analyze_agent"), output: DataId("paper_analyze_result") }), queue_size: None }}, outputs: {DataId("writer_report")}, source: Python(PythonSource { source: "report_writer_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("feedback_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("writer_report"): Input { mapping: User(UserInputMapping { source: NodeId("report_writer_agent"), output: DataId("writer_report") }), queue_size: None }}, outputs: {DataId("feedback_result")}, source: Python(PythonSource { source: "feedback_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("refinement_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("feedback_result"): Input { mapping: User(UserInputMapping { source: NodeId("feedback_agent"), output: DataId("feedback_result") }), queue_size: None }}, outputs: {DataId("refinement_result")}, source: Python(PythonSource { source: "refinement_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("evaluation_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("refinement_result"): Input { mapping: User(UserInputMapping { source: NodeId("refinement_agent"), output: DataId("refinement_result") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "evaluation_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/mnt/d/project/zzbc/Moxin-App-Engine/mae/examples/agents/super_agent/paper"}: dora_coordinator::run: successfully spawned dataflow `0190badd-352a-706d-81fc-2420da07e770`
