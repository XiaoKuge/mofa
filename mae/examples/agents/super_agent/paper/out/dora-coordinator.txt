2024-08-01T00:54:22.547527Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("keyword_extractor"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("task_input"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("keywords")}, source: Python(PythonSource { source: "keyword_extractor.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("paper_downloader_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("keywords"): Input { mapping: User(UserInputMapping { source: NodeId("keyword_extractor"), output: DataId("keywords") }), queue_size: None }}, outputs: {DataId("papers_info")}, source: Python(PythonSource { source: "paper_downloader_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("paper_analyze_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("papers_info"): Input { mapping: User(UserInputMapping { source: NodeId("paper_downloader_agent"), output: DataId("papers_info") }), queue_size: None }}, outputs: {DataId("paper_analyze_result")}, source: Python(PythonSource { source: "paper_analyze_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("report_writer_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("paper_analyze_result"): Input { mapping: User(UserInputMapping { source: NodeId("paper_analyze_agent"), output: DataId("paper_analyze_result") }), queue_size: None }}, outputs: {DataId("writer_report")}, source: Python(PythonSource { source: "report_writer_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("feedback_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("evaluation_result"): Input { mapping: User(UserInputMapping { source: NodeId("evaluation_agent"), output: DataId("evaluation_result") }), queue_size: None }, DataId("writer_report"): Input { mapping: User(UserInputMapping { source: NodeId("report_writer_agent"), output: DataId("writer_report") }), queue_size: None }}, outputs: {DataId("feedback_result")}, source: Python(PythonSource { source: "feedback_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("refinement_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("feedback_result"): Input { mapping: User(UserInputMapping { source: NodeId("feedback_agent"), output: DataId("feedback_result") }), queue_size: None }}, outputs: {DataId("refinement_result")}, source: Python(PythonSource { source: "refinement_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("evaluation_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("refinement_result"): Input { mapping: User(UserInputMapping { source: NodeId("refinement_agent"), output: DataId("refinement_result") }), queue_size: None }}, outputs: {DataId("evaluation_result")}, source: Python(PythonSource { source: "evaluation_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/Moxin-App-Engine/mae/examples/agents/super_agent/paper"}: dora_coordinator::run: successfully spawned dataflow `01910b6e-484d-72ce-8c79-8075a9c9dfbd`
2024-08-01T01:11:02.342717Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("keyword_extractor"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("task_input"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("keywords")}, source: Python(PythonSource { source: "keyword_extractor.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("paper_downloader_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("keywords"): Input { mapping: User(UserInputMapping { source: NodeId("keyword_extractor"), output: DataId("keywords") }), queue_size: None }}, outputs: {DataId("papers_info")}, source: Python(PythonSource { source: "paper_downloader_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("paper_analyze_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("papers_info"): Input { mapping: User(UserInputMapping { source: NodeId("paper_downloader_agent"), output: DataId("papers_info") }), queue_size: None }}, outputs: {DataId("paper_analyze_result")}, source: Python(PythonSource { source: "paper_analyze_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("report_writer_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("paper_analyze_result"): Input { mapping: User(UserInputMapping { source: NodeId("paper_analyze_agent"), output: DataId("paper_analyze_result") }), queue_size: None }}, outputs: {DataId("writer_report")}, source: Python(PythonSource { source: "report_writer_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("feedback_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("evaluation_result"): Input { mapping: User(UserInputMapping { source: NodeId("evaluation_agent"), output: DataId("evaluation_result") }), queue_size: None }, DataId("writer_report"): Input { mapping: User(UserInputMapping { source: NodeId("report_writer_agent"), output: DataId("writer_report") }), queue_size: None }}, outputs: {DataId("feedback_result")}, source: Python(PythonSource { source: "feedback_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("refinement_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("feedback_result"): Input { mapping: User(UserInputMapping { source: NodeId("feedback_agent"), output: DataId("feedback_result") }), queue_size: None }}, outputs: {DataId("refinement_result")}, source: Python(PythonSource { source: "refinement_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("evaluation_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("refinement_result"): Input { mapping: User(UserInputMapping { source: NodeId("refinement_agent"), output: DataId("refinement_result") }), queue_size: None }}, outputs: {DataId("evaluation_result")}, source: Python(PythonSource { source: "evaluation_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/Moxin-App-Engine/mae/examples/agents/super_agent/paper"}: dora_coordinator::run: successfully spawned dataflow `01910b7d-89c2-7295-ae63-b954f0c67f1b`
2024-08-01T01:33:39.706187Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("web_search_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("task_input"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("web_search_result")}, source: Python(PythonSource { source: "web_search_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("more_question_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_result"): Input { mapping: User(UserInputMapping { source: NodeId("web_search_agent"), output: DataId("web_search_result") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "more_question_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/Moxin-App-Engine/mae/examples/agents/super_agent/web_search"}: dora_coordinator::run: successfully spawned dataflow `01910b92-3ff9-7e15-8d65-a95b05e4b1e1`
2024-08-01T01:35:14.324689Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("web_search_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("task_input"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("web_search_result")}, source: Python(PythonSource { source: "web_search_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("more_question_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_result"): Input { mapping: User(UserInputMapping { source: NodeId("web_search_agent"), output: DataId("web_search_result") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "more_question_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/Moxin-App-Engine/mae/examples/agents/super_agent/web_search"}: dora_coordinator::run: successfully spawned dataflow `01910b93-b193-7de3-b241-9d9c0c473c47`
2024-08-01T01:41:50.497291Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("web_search_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("task_input"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("web_search_result")}, source: Python(PythonSource { source: "web_search_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("more_question_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_result"): Input { mapping: User(UserInputMapping { source: NodeId("web_search_agent"), output: DataId("web_search_result") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "more_question_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/Moxin-App-Engine/mae/examples/agents/super_agent/web_search"}: dora_coordinator::run: successfully spawned dataflow `01910b99-bd20-7651-9c20-944ff590f8e8`
2024-08-01T01:43:35.185337Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("web_search_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("task_input"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("web_search_result")}, source: Python(PythonSource { source: "web_search_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("more_question_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_result"): Input { mapping: User(UserInputMapping { source: NodeId("web_search_agent"), output: DataId("web_search_result") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "more_question_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/Moxin-App-Engine/mae/examples/agents/super_agent/web_search"}: dora_coordinator::run: successfully spawned dataflow `01910b9b-5610-79b6-941d-d08d8051c43c`
2024-08-01T01:44:15.170416Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("web_search_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("task_input"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("web_search_result")}, source: Python(PythonSource { source: "web_search_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("more_question_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_result"): Input { mapping: User(UserInputMapping { source: NodeId("web_search_agent"), output: DataId("web_search_result") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "more_question_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/Moxin-App-Engine/mae/examples/agents/super_agent/web_search"}: dora_coordinator::run: successfully spawned dataflow `01910b9b-f241-7867-ac03-f501aec01668`
2024-08-01T02:33:02.785359Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("web_search_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("task_input"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("web_search_result")}, source: Python(PythonSource { source: "web_search_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("more_question_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_result"): Input { mapping: User(UserInputMapping { source: NodeId("web_search_agent"), output: DataId("web_search_result") }), queue_size: None }}, outputs: {}, source: Python(PythonSource { source: "more_question_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/Moxin-App-Engine/mae/examples/agents/super_agent/web_search"}: dora_coordinator::run: successfully spawned dataflow `01910bc8-9e40-71eb-89e8-acf398afa0b1`
2024-08-01T09:28:21.067433Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("web_search_task"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("web_search_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_task"): Input { mapping: User(UserInputMapping { source: NodeId("web_search_task"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("web_search_aggregate_output"), DataId("web_search_resource"), DataId("web_search_results")}, source: Python(PythonSource { source: "./scripts/web_search_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("more_question_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_aggregate_output"): Input { mapping: User(UserInputMapping { source: NodeId("web_search_agent"), output: DataId("web_search_aggregate_output") }), queue_size: None }}, outputs: {DataId("more_question_results"), DataId("web_search_aggregate_output")}, source: Python(PythonSource { source: "./scripts/more_question_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("web_search_output"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_aggregate_output"): Input { mapping: User(UserInputMapping { source: NodeId("more_question_agent"), output: DataId("web_search_aggregate_output") }), queue_size: None }}, outputs: {DataId("more_question_results"), DataId("web_search_output"), DataId("web_search_resource"), DataId("web_search_results"), DataId("web_search_task")}, source: Python(PythonSource { source: "./scripts/web_search_output.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("reasoner_task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("reasoner_task")} }, Node { id: NodeId("reasoner_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("more_question_results"): Input { mapping: User(UserInputMapping { source: NodeId("more_question_agent"), output: DataId("more_question_results") }), queue_size: None }, DataId("reasoner_task"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner_task_input"), output: DataId("reasoner_task") }), queue_size: None }}, outputs: {DataId("reasoner_result")}, source: Python(PythonSource { source: "./scripts/reasoner_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("reasoner_output"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("reasoner_result"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner_agent"), output: DataId("reasoner_result") }), queue_size: None }}, outputs: {DataId("reasoner_output")}, source: Python(PythonSource { source: "./scripts/reasoner_output.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/Moxin-App-Engine/mae/examples/generate"}: dora_coordinator::run: successfully spawned dataflow `01910d44-d748-7342-a79c-c399681ceaeb`
2024-08-01T09:30:11.112589Z  INFO dora_coordinator: successfully send stop dataflow `01910d44-d748-7342-a79c-c399681ceaeb` to all daemons
2024-08-01T09:38:32.910948Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("web_search_task"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("web_search_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_task"): Input { mapping: User(UserInputMapping { source: NodeId("web_search_task"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("web_search_aggregate_output"), DataId("web_search_resource"), DataId("web_search_results")}, source: Python(PythonSource { source: "./scripts/web_search_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("more_question_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_aggregate_output"): Input { mapping: User(UserInputMapping { source: NodeId("web_search_agent"), output: DataId("web_search_aggregate_output") }), queue_size: None }}, outputs: {DataId("more_question_results"), DataId("web_search_aggregate_output")}, source: Python(PythonSource { source: "./scripts/more_question_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("web_search_output"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_aggregate_output"): Input { mapping: User(UserInputMapping { source: NodeId("more_question_agent"), output: DataId("web_search_aggregate_output") }), queue_size: None }}, outputs: {DataId("more_question_results"), DataId("web_search_output"), DataId("web_search_resource"), DataId("web_search_results"), DataId("web_search_task")}, source: Python(PythonSource { source: "./scripts/web_search_output.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("reasoner_task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("reasoner_task")} }, Node { id: NodeId("reasoner_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("more_question_results"): Input { mapping: User(UserInputMapping { source: NodeId("more_question_agent"), output: DataId("more_question_results") }), queue_size: None }, DataId("reasoner_task"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner_task_input"), output: DataId("reasoner_task") }), queue_size: None }}, outputs: {DataId("reasoner_result")}, source: Python(PythonSource { source: "./scripts/reasoner_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("reasoner_output"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("reasoner_result"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner_agent"), output: DataId("reasoner_result") }), queue_size: None }}, outputs: {DataId("reasoner_output")}, source: Python(PythonSource { source: "./scripts/reasoner_output.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/Moxin-App-Engine/mae/examples/generate"}: dora_coordinator::run: successfully spawned dataflow `01910d4e-2d4c-732e-b966-daeff56f1f3a`
2024-08-01T09:46:44.625457Z  INFO dora_coordinator: successfully send stop dataflow `01910d4e-2d4c-732e-b966-daeff56f1f3a` to all daemons
2024-08-01T09:46:54.004587Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("web_search_task"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("web_search_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_task"): Input { mapping: User(UserInputMapping { source: NodeId("web_search_task"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("web_search_aggregate_output"), DataId("web_search_resource"), DataId("web_search_results")}, source: Python(PythonSource { source: "./scripts/web_search_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("more_question_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_aggregate_output"): Input { mapping: User(UserInputMapping { source: NodeId("web_search_agent"), output: DataId("web_search_aggregate_output") }), queue_size: None }}, outputs: {DataId("more_question_results"), DataId("web_search_aggregate_output")}, source: Python(PythonSource { source: "./scripts/more_question_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("web_search_output"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_aggregate_output"): Input { mapping: User(UserInputMapping { source: NodeId("more_question_agent"), output: DataId("web_search_aggregate_output") }), queue_size: None }}, outputs: {DataId("more_question_results"), DataId("web_search_output"), DataId("web_search_resource"), DataId("web_search_results"), DataId("web_search_task")}, source: Python(PythonSource { source: "./scripts/web_search_output.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("reasoner_task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("reasoner_task")} }, Node { id: NodeId("reasoner_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("more_question_results"): Input { mapping: User(UserInputMapping { source: NodeId("more_question_agent"), output: DataId("more_question_results") }), queue_size: None }, DataId("reasoner_task"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner_task_input"), output: DataId("reasoner_task") }), queue_size: None }}, outputs: {DataId("reasoner_result")}, source: Python(PythonSource { source: "./scripts/reasoner_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("reasoner_output"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("reasoner_result"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner_agent"), output: DataId("reasoner_result") }), queue_size: None }}, outputs: {DataId("reasoner_output")}, source: Python(PythonSource { source: "./scripts/reasoner_output.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/Moxin-App-Engine/mae/examples/generate"}: dora_coordinator::run: successfully spawned dataflow `01910d55-d2b2-759b-b59d-a766fbf8aeb4`
2024-08-01T09:51:02.618277Z  INFO dora_coordinator: successfully send stop dataflow `01910d55-d2b2-759b-b59d-a766fbf8aeb4` to all daemons
2024-08-01T09:52:38.167613Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("web_search_task"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("web_search_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_task"): Input { mapping: User(UserInputMapping { source: NodeId("web_search_task"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("web_search_aggregate_output"), DataId("web_search_resource"), DataId("web_search_results")}, source: Python(PythonSource { source: "./scripts/web_search_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("more_question_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_aggregate_output"): Input { mapping: User(UserInputMapping { source: NodeId("web_search_agent"), output: DataId("web_search_aggregate_output") }), queue_size: None }}, outputs: {DataId("more_question_results"), DataId("web_search_aggregate_output")}, source: Python(PythonSource { source: "./scripts/more_question_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("web_search_output"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_aggregate_output"): Input { mapping: User(UserInputMapping { source: NodeId("more_question_agent"), output: DataId("web_search_aggregate_output") }), queue_size: None }}, outputs: {DataId("more_question_results"), DataId("web_search_output"), DataId("web_search_resource"), DataId("web_search_results"), DataId("web_search_task")}, source: Python(PythonSource { source: "./scripts/web_search_output.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("reasoner_task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("reasoner_task")} }, Node { id: NodeId("reasoner_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("more_question_results"): Input { mapping: User(UserInputMapping { source: NodeId("more_question_agent"), output: DataId("more_question_results") }), queue_size: None }, DataId("reasoner_task"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner_task_input"), output: DataId("reasoner_task") }), queue_size: None }}, outputs: {DataId("reasoner_result")}, source: Python(PythonSource { source: "./scripts/reasoner_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("reasoner_output"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("reasoner_result"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner_agent"), output: DataId("reasoner_result") }), queue_size: None }}, outputs: {DataId("reasoner_output")}, source: Python(PythonSource { source: "./scripts/reasoner_output.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/Moxin-App-Engine/mae/examples/generate"}: dora_coordinator::run: successfully spawned dataflow `01910d5b-1315-7030-9ab5-b0a93604e546`
2024-08-01T09:57:54.342430Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("web_search_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("web_search_aggregate_output"), DataId("web_search_resource"), DataId("web_search_results")}, source: Python(PythonSource { source: "./scripts/web_search_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("more_question_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_aggregate_output"): Input { mapping: User(UserInputMapping { source: NodeId("web_search_agent"), output: DataId("web_search_aggregate_output") }), queue_size: None }}, outputs: {DataId("more_question_results"), DataId("web_search_aggregate_output")}, source: Python(PythonSource { source: "./scripts/more_question_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("web_search_output"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_aggregate_output"): Input { mapping: User(UserInputMapping { source: NodeId("more_question_agent"), output: DataId("web_search_aggregate_output") }), queue_size: None }}, outputs: {DataId("more_question_results"), DataId("web_search_output"), DataId("web_search_resource"), DataId("web_search_results"), DataId("web_search_task")}, source: Python(PythonSource { source: "./scripts/web_search_output.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("reasoner_task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("reasoner_task")} }, Node { id: NodeId("reasoner_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("more_question_results"): Input { mapping: User(UserInputMapping { source: NodeId("more_question_agent"), output: DataId("more_question_results") }), queue_size: None }, DataId("reasoner_task"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner_task_input"), output: DataId("reasoner_task") }), queue_size: None }}, outputs: {DataId("reasoner_result")}, source: Python(PythonSource { source: "./scripts/reasoner_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("reasoner_output"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("reasoner_result"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner_agent"), output: DataId("reasoner_result") }), queue_size: None }}, outputs: {DataId("reasoner_output")}, source: Python(PythonSource { source: "./scripts/reasoner_output.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/Moxin-App-Engine/mae/examples/generate"}: dora_coordinator::run: successfully spawned dataflow `01910d5f-e624-7361-919b-e6c6ea6bd722`
2024-08-02T01:46:41.588874Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("web_search_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("web_search_aggregate_output"), DataId("web_search_resource"), DataId("web_search_results")}, source: Python(PythonSource { source: "./scripts/web_search_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("more_question_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_aggregate_output"): Input { mapping: User(UserInputMapping { source: NodeId("web_search_agent"), output: DataId("web_search_aggregate_output") }), queue_size: None }}, outputs: {DataId("more_question_results"), DataId("web_search_aggregate_output")}, source: Python(PythonSource { source: "./scripts/more_question_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("web_search_output"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_aggregate_output"): Input { mapping: User(UserInputMapping { source: NodeId("more_question_agent"), output: DataId("web_search_aggregate_output") }), queue_size: None }}, outputs: {DataId("more_question_results"), DataId("web_search_output"), DataId("web_search_resource"), DataId("web_search_results"), DataId("web_search_task")}, source: Python(PythonSource { source: "./scripts/web_search_output.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("reasoner_task_input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("reasoner_task")} }, Node { id: NodeId("reasoner_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("more_question_results"): Input { mapping: User(UserInputMapping { source: NodeId("more_question_agent"), output: DataId("more_question_results") }), queue_size: None }, DataId("reasoner_task"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner_task_input"), output: DataId("reasoner_task") }), queue_size: None }}, outputs: {DataId("reasoner_result")}, source: Python(PythonSource { source: "./scripts/reasoner_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("reasoner_output"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("reasoner_result"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner_agent"), output: DataId("reasoner_result") }), queue_size: None }}, outputs: {DataId("reasoner_output")}, source: Python(PythonSource { source: "./scripts/reasoner_output.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/Moxin-App-Engine/mae/examples/generate"}: dora_coordinator::run: successfully spawned dataflow `019110c4-8a32-7478-a77a-2bfe7f2c563d`
2024-08-02T01:55:56.223245Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("web_search_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("web_search_aggregate_output"), DataId("web_search_resource"), DataId("web_search_results")}, source: Python(PythonSource { source: "./scripts/web_search_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/Moxin-App-Engine/mae/examples/generate"}: dora_coordinator::run: successfully spawned dataflow `019110cd-00be-764b-8b6c-c34412417101`
2024-08-02T02:41:22.707323Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("web_search_task"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("web_search_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("web_search_aggregate_output"), DataId("web_search_resource"), DataId("web_search_results")}, source: Python(PythonSource { source: "./scripts/web_search_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/Moxin-App-Engine/mae/examples/generate"}: dora_coordinator::run: successfully spawned dataflow `019110f6-9b12-796b-83b3-b60a3c70ddf6`
2024-08-02T02:42:39.990925Z  INFO dora_coordinator: successfully send stop dataflow `019110c4-8a32-7478-a77a-2bfe7f2c563d` to all daemons
2024-08-02T02:43:43.817081Z  INFO dora_coordinator: Received destroy command
2024-08-02T02:43:43.817649Z  INFO dora_coordinator: successfully send stop dataflow `01910d5f-e624-7361-919b-e6c6ea6bd722` to all daemons
2024-08-02T02:43:43.817811Z  INFO dora_coordinator: successfully send stop dataflow `019110f6-9b12-796b-83b3-b60a3c70ddf6` to all daemons
2024-08-02T02:43:43.817950Z  INFO dora_coordinator: successfully send stop dataflow `01910d5b-1315-7030-9ab5-b0a93604e546` to all daemons
2024-08-02T02:43:43.818264Z  INFO dora_coordinator: successfully destroyed daemon ``
2024-08-02T02:43:43.818593Z  INFO dora_coordinator: stopped
