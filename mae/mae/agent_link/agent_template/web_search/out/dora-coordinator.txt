2024-08-14T01:40:41.639180Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("web_search_task"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("web_search_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_task"): Input { mapping: User(UserInputMapping { source: NodeId("web_search_task"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("web_search_aggregate_output"), DataId("web_search_resource"), DataId("web_search_results")}, source: Python(PythonSource { source: "./scripts/web_search_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("more_question_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_aggregate_output"): Input { mapping: User(UserInputMapping { source: NodeId("web_search_agent"), output: DataId("web_search_aggregate_output") }), queue_size: None }}, outputs: {DataId("more_question_results"), DataId("web_search_aggregate_output")}, source: Python(PythonSource { source: "./scripts/more_question_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("web_search_output"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("web_search_aggregate_output"): Input { mapping: User(UserInputMapping { source: NodeId("more_question_agent"), output: DataId("web_search_aggregate_output") }), queue_size: None }}, outputs: {DataId("more_question_results"), DataId("web_search_output"), DataId("web_search_resource"), DataId("web_search_results"), DataId("web_search_task")}, source: Python(PythonSource { source: "./scripts/web_search_output.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/Moxin-App-Engine/mae/mae/agent_link/agent_template/web_search"}: dora_coordinator::run: successfully spawned dataflow `01914e8b-5c22-7aa3-a61a-e2aabf3351cd`
2024-08-14T02:01:49.059940Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("arxiv_research_task"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("keyword_extractor_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("arxiv_research_task"): Input { mapping: User(UserInputMapping { source: NodeId("arxiv_research_task"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("keyword_extractor_results")}, source: Python(PythonSource { source: "scripts/keyword_extractor.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("paper_downloader_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("keywords"): Input { mapping: User(UserInputMapping { source: NodeId("keyword_extractor_agent"), output: DataId("keyword_extractor_results") }), queue_size: None }}, outputs: {DataId("papers_info")}, source: Python(PythonSource { source: "scripts/paper_downloader_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("paper_analyze_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("papers_info"): Input { mapping: User(UserInputMapping { source: NodeId("paper_downloader_agent"), output: DataId("papers_info") }), queue_size: None }}, outputs: {DataId("paper_analyze_result")}, source: Python(PythonSource { source: "scripts/paper_analyze_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("report_writer_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("paper_analyze_result"): Input { mapping: User(UserInputMapping { source: NodeId("paper_analyze_agent"), output: DataId("paper_analyze_result") }), queue_size: None }}, outputs: {DataId("writer_report")}, source: Python(PythonSource { source: "scripts/report_writer_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("feedback_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("evaluation_result"): Input { mapping: User(UserInputMapping { source: NodeId("evaluation_agent"), output: DataId("evaluation_result") }), queue_size: None }, DataId("writer_report"): Input { mapping: User(UserInputMapping { source: NodeId("report_writer_agent"), output: DataId("writer_report") }), queue_size: None }}, outputs: {DataId("feedback_result")}, source: Python(PythonSource { source: "scripts/feedback_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("refinement_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("feedback_result"): Input { mapping: User(UserInputMapping { source: NodeId("feedback_agent"), output: DataId("feedback_result") }), queue_size: None }}, outputs: {DataId("refinement_result")}, source: Python(PythonSource { source: "scripts/refinement_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("evaluation_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("refinement_result"): Input { mapping: User(UserInputMapping { source: NodeId("refinement_agent"), output: DataId("refinement_result") }), queue_size: None }}, outputs: {DataId("evaluation_result")}, source: Python(PythonSource { source: "scripts/evaluation_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/Moxin-App-Engine/mae/mae/agent_link/agent_template/arxiv_research"}: dora_coordinator::run: successfully spawned dataflow `01914e9e-b300-76cd-a9c2-9d608107969c`
2024-08-14T02:07:59.768113Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("arxiv_research_task"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: None, send_stdout_as: None, inputs: {DataId("direction"): Input { mapping: Timer { interval: 1s }, queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("keyword_extractor_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("arxiv_research_task"): Input { mapping: User(UserInputMapping { source: NodeId("arxiv_research_task"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("keyword_extractor_results")}, source: Python(PythonSource { source: "scripts/keyword_extractor.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("paper_downloader_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("keywords"): Input { mapping: User(UserInputMapping { source: NodeId("keyword_extractor_agent"), output: DataId("keyword_extractor_results") }), queue_size: None }}, outputs: {DataId("papers_info")}, source: Python(PythonSource { source: "scripts/paper_downloader_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("paper_analyze_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("papers_info"): Input { mapping: User(UserInputMapping { source: NodeId("paper_downloader_agent"), output: DataId("papers_info") }), queue_size: None }}, outputs: {DataId("paper_analyze_result")}, source: Python(PythonSource { source: "scripts/paper_analyze_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("report_writer_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("paper_analyze_result"): Input { mapping: User(UserInputMapping { source: NodeId("paper_analyze_agent"), output: DataId("paper_analyze_result") }), queue_size: None }}, outputs: {DataId("writer_report")}, source: Python(PythonSource { source: "scripts/report_writer_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("feedback_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("evaluation_result"): Input { mapping: User(UserInputMapping { source: NodeId("evaluation_agent"), output: DataId("evaluation_result") }), queue_size: None }, DataId("writer_report"): Input { mapping: User(UserInputMapping { source: NodeId("report_writer_agent"), output: DataId("writer_report") }), queue_size: None }}, outputs: {DataId("feedback_result")}, source: Python(PythonSource { source: "scripts/feedback_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("refinement_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("feedback_result"): Input { mapping: User(UserInputMapping { source: NodeId("feedback_agent"), output: DataId("feedback_result") }), queue_size: None }}, outputs: {DataId("refinement_result")}, source: Python(PythonSource { source: "scripts/refinement_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("evaluation_agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("refinement_result"): Input { mapping: User(UserInputMapping { source: NodeId("refinement_agent"), output: DataId("refinement_result") }), queue_size: None }}, outputs: {DataId("evaluation_result")}, source: Python(PythonSource { source: "scripts/evaluation_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/Moxin-App-Engine/mae/mae/agent_link/agent_template/arxiv_research"}: dora_coordinator::run: successfully spawned dataflow `01914ea4-5b15-752b-a5ff-c78a9212581a`
