FROM swr.cn-southwest-2.myhuaweicloud.com/openmind-space-base/openmind:openeuler-python3.8-cann8.0-mindspore2.3.0rc1-openmind0.6

# 设置 OpenSSL 环境变量
ENV OPENSSL_VERSION=3.3.2
ENV OPENSSL_INSTALL_DIR=/usr/local/openssl-${OPENSSL_VERSION}
ENV PATH=${OPENSSL_INSTALL_DIR}/bin:${PATH}
ENV LD_LIBRARY_PATH=${OPENSSL_INSTALL_DIR}/lib:${LD_LIBRARY_PATH}
ENV C_INCLUDE_PATH=${OPENSSL_INSTALL_DIR}/include:${C_INCLUDE_PATH}
ENV LIBRARY_PATH=${OPENSSL_INSTALL_DIR}/lib:${LIBRARY_PATH}
ENV PKG_CONFIG_PATH=${OPENSSL_INSTALL_DIR}/lib/pkgconfig:${PKG_CONFIG_PATH}

# 设置 Miniconda 安装的相关变量
ENV MINICONDA_VERSION=latest
ENV MINICONDA_INSTALLER=Miniconda3-$MINICONDA_VERSION-Linux-aarch64.sh
ENV MINICONDA_PREFIX=/opt/conda
ENV PATH=$MINICONDA_PREFIX/bin:$PATH

# 更新系统并安装依赖
RUN yum update -y && \
    yum install -y wget bzip2 git vim && \
    yum clean all

# 下载并安装 Miniconda (ARM 版本)
RUN wget --quiet https://repo.anaconda.com/miniconda/$MINICONDA_INSTALLER -O /tmp/miniconda.sh && \
    /bin/bash /tmp/miniconda.sh -b -p $MINICONDA_PREFIX && \
    rm -f /tmp/miniconda.sh

# 初始化 Conda
RUN $MINICONDA_PREFIX/bin/conda init bash

# 将 Conda 激活命令写入 .bashrc
RUN echo "source /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc

# 更新 Conda 并创建 Python 3.10.13 以上的 base 环境
RUN /bin/bash -c "source ~/.bashrc && \
    conda update -n base -c defaults conda -y && \
    conda install python=3.10.13 -y && \
    conda clean -a -y"

# 安装项目依赖
RUN /bin/bash -c "source ~/.bashrc && \
    mkdir -p /project && \
    cd /project && \
    git clone https://gitcode.com/moxin-org/mofa.git && \
    cd mofa && \
    git checkout feature/mofa && \
    cd /project/mofa/python && \
    pip3 install --upgrade pip --index-url https://pypi.org/simple && \
    pip3 install -e . -i https://pypi.org/simple"

# 设置工作目录
WORKDIR /project


RUN yum update -y && \
    yum groupinstall -y "Development Tools" && \
    yum install -y \
        git \
        vim \
        cmake \
        uuid-devel \
        libuuid-devel \
        openssl-devel \
        python3-devel \
        make \
        wget \
        curl \
        curl-devel && \
    yum clean all


RUN cd /project && \
    git clone https://github.com/xlang-foundation/xMind.git && \
    cd xMind/ThirdParty && \
    git clone https://github.com/xlang-foundation/xlang.git && \
    cd xlang && \
    echo "Switched to Jit branch successfully." && \
    cd /project/xMind && \
    mkdir -p out && \
    echo "Created build directory successfully."

RUN mkdir -p /usr/local/src && \
    cd /usr/local/src && \
    wget https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz && \
    tar -xzvf openssl-${OPENSSL_VERSION}.tar.gz && \
    cd openssl-${OPENSSL_VERSION} && \
    ./config --prefix=${OPENSSL_INSTALL_DIR} --openssldir=${OPENSSL_INSTALL_DIR} shared zlib && \
    make -j$(nproc) && \
    make install && \
    # 备份现有的 OpenSSL 并链接新的版本
    mv /usr/bin/openssl /usr/bin/openssl.bak && \
    ln -s ${OPENSSL_INSTALL_DIR}/bin/openssl /usr/bin/openssl && \
    # 配置动态链接器以包含新的 OpenSSL 库 \
    echo 'export PATH="${OPENSSL_PREFIX}/bin:$PATH"' >> ~/.bashrc && \
    echo 'export LD_LIBRARY_PATH="${OPENSSL_PREFIX}/lib:$LD_LIBRARY_PATH"' >> ~/.bashrc && \
    echo "${OPENSSL_INSTALL_DIR}/lib" > /etc/ld.so.conf.d/openssl-3.3.2.conf && \
    ldconfig && \
    # 清理 OpenSSL 源码文件以减小镜像体积
    rm -rf /usr/local/src/openssl-${OPENSSL_VERSION}* /usr/local/src/openssl-${OPENSSL_VERSION}.tar.gz && \
    echo "OpenSSL 3.x installed and configured successfully."


# 验证 OpenSSL 安装
RUN openssl version

#RUN rm -rf /project/xMind/ThirdParty/xlang/CMakeLists.txt && \
#    cat <<EOL > /project/xMind/ThirdParty/xlang/CMakeLists.txt
## CMakeList.txt : CMake project for X-Lang, include source and define
## project specific logic here.
##
#cmake_minimum_required(VERSION 3.8)
#project("xlang")
#set(CMAKE_CXX_STANDARD 20)
#
## Set output directories
#set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \${CMAKE_BINARY_DIR}/bin)
#set(CMAKE_LIBRARY_OUTPUT_DIRECTORY \${CMAKE_BINARY_DIR}/bin)
#set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \${CMAKE_BINARY_DIR}/bin)
#
## 查找 OpenSSL 3.x
#find_package(OpenSSL 3.0 REQUIRED)
#
## To enable Link Time Optimization (LTO) for Release builds.
#if(MSVC)
#    # Enable LTO for MSVC
#    set(CMAKE_CXX_FLAGS_RELEASE "\${CMAKE_CXX_FLAGS_RELEASE} /GL")
#    set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "\${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /LTCG")
#    set(CMAKE_STATIC_LINKER_FLAGS_RELEASE "\${CMAKE_STATIC_LINKER_FLAGS_RELEASE} /LTCG")
#    set(CMAKE_MODULE_LINKER_FLAGS_RELEASE "\${CMAKE_MODULE_LINKER_FLAGS_RELEASE} /LTCG")
#    set(CMAKE_EXE_LINKER_FLAGS_RELEASE "\${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LTCG")
#elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
#    # Enable LTO for GCC
#    set(CMAKE_CXX_FLAGS "\${CMAKE_CXX_FLAGS} -flto")
#    set(CMAKE_EXE_LINKER_FLAGS "\${CMAKE_EXE_LINKER_FLAGS} -flto")
#endif()
#
## 包含 OpenSSL 头文件
#include_directories(\${OPENSSL_INCLUDE_DIR})
#
## 创建并配置 Api 目录
#file(MAKE_DIRECTORY \${CMAKE_BINARY_DIR}/bin/Api)
#configure_file("\${PROJECT_SOURCE_DIR}/Api/value.h" "\${CMAKE_BINARY_DIR}/bin/Api/value.h")
#configure_file("\${PROJECT_SOURCE_DIR}/Api/value.cpp" "\${CMAKE_BINARY_DIR}/bin/Api/value.cpp")
#configure_file("\${PROJECT_SOURCE_DIR}/Api/xhost.h" "\${CMAKE_BINARY_DIR}/bin/Api/xhost.h")
#configure_file("\${PROJECT_SOURCE_DIR}/Api/xlang.h" "\${CMAKE_BINARY_DIR}/bin/Api/xlang.h")
#configure_file("\${PROJECT_SOURCE_DIR}/Api/xload.h" "\${CMAKE_BINARY_DIR}/bin/Api/xload.h")
#configure_file("\${PROJECT_SOURCE_DIR}/Api/xload.cpp" "\${CMAKE_BINARY_DIR}/bin/Api/xload.cpp")
#configure_file("\${PROJECT_SOURCE_DIR}/Api/xlstream.h" "\${CMAKE_BINARY_DIR}/bin/Api/xlstream.h")
#configure_file("\${PROJECT_SOURCE_DIR}/Api/xpackage.h" "\${CMAKE_BINARY_DIR}/bin/Api/xpackage.h")
#configure_file("\${PROJECT_SOURCE_DIR}/Api/xport.h" "\${CMAKE_BINARY_DIR}/bin/Api/xport.h")
#configure_file("\${PROJECT_SOURCE_DIR}/Api/xproxy.h" "\${CMAKE_BINARY_DIR}/bin/Api/xproxy.h")
#
## 包含 Api 目录
#include_directories("Api")
#
## 获取源文件
#FILE(GLOB Api_SRC "Api/*.cpp")
#FILE(GLOB AppEntry_SRC "X.cpp" "cli.cpp")
#
## 添加可执行文件
#add_executable(\${PROJECT_NAME}
#    \${Api_SRC}
#    \${AppEntry_SRC}
#)
#
## 链接 pthread, dl 和 OpenSSL
#if(NOT (WIN32))
#    target_link_libraries(\${PROJECT_NAME} pthread dl OpenSSL::SSL OpenSSL::Crypto)
#endif()
#
## 添加子目录
#add_subdirectory("Main")
#add_subdirectory("os")
#add_subdirectory("Http")
#add_subdirectory("PyEng")
#add_subdirectory("DevSrv")
#if(WIN32)
#    add_subdirectory("winner")
#endif()
#add_subdirectory("sqlite")
#add_subdirectory("Image")
#add_subdirectory("WebCore")
#add_subdirectory("all")
#add_subdirectory("Interop")
#add_subdirectory("algorithm")
#if(NOT (BARE_METAL))
#    add_subdirectory("BareLink")
#    add_subdirectory("Yaml")
#endif()
#EOL
#
#RUN /bin/bash -c "source ~/.bashrc && \
#    cd /project/xMind/out && \
#    cmake -DCMAKE_PREFIX_PATH=${OPENSSL_INSTALL_DIR} .. && \
#    make -j$(nproc) "


RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"
RUN cargo install dora-cli --locked && pip3 install dora-rs

CMD ["/bin/bash"]
