agent:
  prompt: |
    **Pyproject.toml Generation Task Instructions**
    **Task Objective**  
    Automatically generate a pyproject.toml file based on the provided template name and package name, ensuring it meets the following core requirements:
    1. Python version must be greater than 3.10
    2. Must include the pyarrow module
    3. Author information uses a fixed format
    4. Other information is dynamically generated based on the template name

    **Input Requirements**  
    - agent_name: Used to generate project name and description
    - module_name: Used to specify package path and script entry point

    **Generation Steps**  
    1. **Basic Information Generation**
    - Project name: Directly use agent_name
    - Version: Fixed as "0.1.0"
    - Description: Generate in the format "A simple {agent_name} template"
    - License: Fixed as "MIT License"
    - Homepage and documentation links: Fixed to Moxin project related URLs
    - README file: Fixed as "README.md"

    2. **Author Information**
    - default format:
        ```toml
        authors = [
            "Cheng Chen <chengchen@moxin.com>",
        ]
        ```

    3. **Dependency Configuration**
    - Python version: Fixed as ">=3.10"
    - Must include pyarrow dependency, version set as ">=5.0.0"
    - Other dependencies: Dynamically added based on code analysis (if code is provided)

    4. **Package Configuration**
    - Package path: Use module_name
    - Include rule: `{ include = "{module_name}" }`

    5. **Script Configuration**
    - Script name: Use agent_name
    - Entry point: `"{module_name}.main:main"`

    6. **Build System**
    - Fixed to use Poetry build system:
        ```toml
        [build-system]
        requires = ["poetry-core>=1.8.0"]
        build-backend = "poetry.core.masonry.api"
        ```

    **Logic Processing Rules**  
    1. Input Validation
    - Check if agent_name and module_name are provided
    - Verify if names comply with Python package naming conventions

    2. Dynamic Content Generation
    - Generate project name and description based on agent_name
    - Generate package path and script configuration based on module_name

    3. Fixed Content Handling
    - Ensure all fixed configurations (authors, Python version, etc.) are correct
    - Maintain standard TOML format

    4. Error Handling
    - Return error message if input is incomplete
    - Provide modification suggestions if names don't comply with conventions

  
    **Example**
    Input:
    ```
    agent_name: data-processor
    module_name: data_processor
    ```

    Output:
    ```toml
    [tool.poetry]
    name = "data-processor"
    version = "0.1.0"
    authors = [
        "ZongHuan Wu <wuzonghuan@moxin.com>",
        "Cheng Chen <chengchen@moxin.com>",
    ]
    description = "A simple data-processor template"
    license = "MIT License"
    homepage = "https://github.com/moxin-org/mofa"
    documentation = "https://github.com/moxin-org/mofa/blob/main/README.md"
    readme = "README.md"
    packages = [{ include = "data_processor" }]

    [tool.poetry.dependencies]
    python = ">=3.10"
    pyarrow = ">=5.0.0"

    [tool.poetry.scripts]
    data-processor = "data_processor.main:main"

    [build-system]
    requires = ["poetry-core>=1.8.0"]
    build-backend = "poetry.core.masonry.api"
    ```

    **Quality Assurance**  
    1. Format Validation
    - Ensure generated TOML file format is correct
    - Validate through TOML parser

    2. Content Validation
    - Check if all fixed configurations are correct
    - Verify if dynamic content accurately reflects input

    3. Compatibility Check
    - Ensure configuration is compatible with the latest Poetry version
    - Validate Python version constraints are reasonable


