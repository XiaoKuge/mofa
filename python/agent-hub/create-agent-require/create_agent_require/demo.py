# from pydantic import BaseModel, Field
# from typing import Optional
#
# import json
# import os
# from dotenv import load_dotenv
# from openai import OpenAI
# from mofa.agent_build.base.base_agent import MofaAgent, run_agent
# from mofa.utils.ai.conn import generate_json_from_llm
# from mofa.utils.files.read import read_yaml
#
#
# class LLMGeneratedRequire(BaseModel):
#     """
#     Represents different types of content generated by LLM,
#     including configuration, code, and documentation.
#     """
#     # Configuration content
#     readme: Optional[str] = Field(
#         None,
#         description="Generated README file content containing project overview, installation instructions, usage examples, and contribution guidelines"
#     )
#
#     toml: Optional[str] = Field(
#         None,
#         description="Generated pyproject.toml configuration file containing project metadata, dependencies, build system configuration, and other project settings"
#     )
#
#     # Metadata
#     generation_time: str = Field(
#         ...,
#         description="ISO 8601 formatted timestamp indicating when the content was generated by the LLM"
#     )
#
# load_dotenv('/Users/chenzi/project/zcbc/mofa/python/agent-hub/create-agent-config/create_agent_config/.env.secret')
#
# os.environ['OPENAI_API_KEY'] = os.getenv('LLM_API_KEY')
#
# client = OpenAI( )
#
# prompt = read_yaml(file_path="/Users/chenzi/project/zcbc/mofa/python/agent-hub/create-agent-require/create_agent_require/configs/agent.yml").get('agent', {}).get('prompt', '')
#
# user_query = """
# 下面的代码就是我的数据库的读取代码，我想要你帮我生成一个agent：
# import psycopg2
#
# def read_postgres_database(db_name, db_user, db_password, db_host, db_port, table_name):
#
#     conn = None  # Initialize conn to None
#     try:
#         conn = psycopg2.connect(
#             dbname=db_name,
#             user=db_user,
#             password=db_password,
#             host=db_host,
#             port=db_port
#         )
#         cursor = conn.cursor()
#
#         cursor.execute(f"SELECT * FROM {table_name}")
#         rows = cursor.fetchall()
#
#         return rows
#
#     except psycopg2.Error as e:
#         print(f"Database error: {e}")
#         return []
#
#     finally:
#         if conn:
#             conn.close()
#
# """
#
# messages = [
#     {"role": "system", "content": json.dumps(prompt)},
#     {"role": "user", "content": f"user : {user_query}  "}
# ]
# result = generate_json_from_llm(client=client,messages=messages,format_class=LLMGeneratedRequire,prompt=user_query)
# print('result : ',result.json())