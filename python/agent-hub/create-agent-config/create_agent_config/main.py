import json
import os
from mofa.agent_build.base.base_agent import MofaAgent, run_agent
from mofa.utils.ai.conn import generate_json_from_llm, structor_llm
from mofa.utils.files.read import read_yaml
from create_agent_config import agent_config_dir_path
from pydantic import BaseModel, Field
from typing import Optional
import datetime

class LLMGeneratedContent(BaseModel):
    """
    Represents different types of content generated by LLM,
    including configuration, code, and documentation.
    """
    # Configuration content
    env_config: Optional[str] = Field(
        None,
        description="Generated .env configuration content containing sensitive keys and environment variables"
    )
    
    yml_config: Optional[str] = Field(
        None,
        description="Generated YAML configuration content for non-sensitive settings and parameters"
    )

    agent_name: str = Field(
        ...,
        description="The name of the agent."
    )
def generate_agent_config(user_query:str,agent_config_path:str,env_file_path:str,response_model:object) :
    agent_config = read_yaml(
        file_path=agent_config_path
    )
    sys_prompt = agent_config.get('agent', {}).get('prompt', '')
    messages = [
        {
            "role": "system",
            "content": sys_prompt
        },
        {
            "role": "user",
            "content": user_query
        }
    ]
    response = structor_llm(env_file=env_file_path, messages=messages, prompt=user_query,response_model=response_model)
    return response
@run_agent
def run(agent: MofaAgent):
    env_file_path = os.path.join(agent_config_dir_path, '.env.secret')
    agent_config_path = os.path.join(agent_config_dir_path, 'configs', 'agent.yml')

    user_query = agent.receive_parameter('query')
    print('time : ',datetime.datetime.now().strftime("%H:%M:%S"))
    result = generate_agent_config(response_model=LLMGeneratedContent, user_query=user_query, agent_config_path=agent_config_path, env_file_path=env_file_path)
    print('result : ',result.json())
    agent.send_output(agent_output_name='create_agent_config_result', agent_result=result.json())

def main():
    agent = MofaAgent(agent_name='create_agent_config')
    run(agent=agent)

if __name__ == "__main__":
    main()
