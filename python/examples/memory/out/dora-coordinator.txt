2024-10-03T08:47:24.334839Z  INFO dora_coordinator: Received destroy command
2024-10-03T08:47:24.335684Z  INFO dora_coordinator: successfully destroyed daemon ``
2024-10-03T08:47:24.335802Z  INFO dora_coordinator: stopped
2024-10-03T09:15:40.648654Z  INFO dora_coordinator: Received destroy command
2024-10-03T09:15:40.648919Z  INFO dora_coordinator: successfully destroyed daemon ``
2024-10-03T09:15:40.649004Z  INFO dora_coordinator: stopped
2024-10-03T09:16:01.105951Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("terminal-input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: Some("pip install -e ../../node-hub/terminal-input"), send_stdout_as: None, inputs: {DataId("context_memory"): Input { mapping: User(UserInputMapping { source: NodeId("memory-retrieval"), output: DataId("context_memory") }), queue_size: None }, DataId("memory_log"): Input { mapping: User(UserInputMapping { source: NodeId("memory-record"), output: DataId("memory_log") }), queue_size: None }, DataId("reasoner_response"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner-agent"), output: DataId("reasoner_response") }), queue_size: None }}, outputs: {DataId("task")} }, Node { id: NodeId("memory-retrieval"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("context_memory")}, source: Python(PythonSource { source: "./scripts/memory_retrieval.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("reasoner-agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("context_memory"): Input { mapping: User(UserInputMapping { source: NodeId("memory-retrieval"), output: DataId("context_memory") }), queue_size: None }, DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("reasoner_response")}, source: Python(PythonSource { source: "scripts/reasoner_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("memory-record"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("reasoner_response"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner-agent"), output: DataId("reasoner_response") }), queue_size: None }, DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("task") }), queue_size: None }}, outputs: {DataId("memory_log")}, source: Python(PythonSource { source: "scripts/memory_record.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/mofa/python/examples/memory"}: dora_coordinator::run: successfully spawned dataflow `019251aa-30cf-7228-998e-15ae1342177e`
2024-10-03T09:18:48.096835Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("terminal-input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: Some("pip install -e ../../node-hub/terminal-input"), send_stdout_as: None, inputs: {DataId("context_memory"): Input { mapping: User(UserInputMapping { source: NodeId("memory-retrieval"), output: DataId("context_memory") }), queue_size: None }, DataId("memory_log"): Input { mapping: User(UserInputMapping { source: NodeId("memory-record"), output: DataId("memory_log") }), queue_size: None }, DataId("reasoner_response"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner-agent"), output: DataId("reasoner_response") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("memory-retrieval"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("context_memory")}, source: Python(PythonSource { source: "./scripts/memory_retrieval.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("reasoner-agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("context_memory"): Input { mapping: User(UserInputMapping { source: NodeId("memory-retrieval"), output: DataId("context_memory") }), queue_size: None }, DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("reasoner_response")}, source: Python(PythonSource { source: "scripts/reasoner_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("memory-record"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("reasoner_response"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner-agent"), output: DataId("reasoner_response") }), queue_size: None }, DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("memory_log")}, source: Python(PythonSource { source: "scripts/memory_record.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/mofa/python/examples/memory"}: dora_coordinator::run: successfully spawned dataflow `019251ac-bd1f-7fe6-877d-2cb8460ccce6`
2024-10-03T09:20:18.445662Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("terminal-input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: Some("pip install -e ../../node-hub/terminal-input"), send_stdout_as: None, inputs: {DataId("context_memory"): Input { mapping: User(UserInputMapping { source: NodeId("memory-retrieval"), output: DataId("context_memory") }), queue_size: None }, DataId("memory_log"): Input { mapping: User(UserInputMapping { source: NodeId("memory-record"), output: DataId("memory_log") }), queue_size: None }, DataId("reasoner_response"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner-agent"), output: DataId("reasoner_response") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("memory-retrieval"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("context_memory")}, source: Python(PythonSource { source: "./scripts/memory_retrieval.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("reasoner-agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("context_memory"): Input { mapping: User(UserInputMapping { source: NodeId("memory-retrieval"), output: DataId("context_memory") }), queue_size: None }, DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("reasoner_response")}, source: Python(PythonSource { source: "scripts/reasoner_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("memory-record"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("reasoner_response"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner-agent"), output: DataId("reasoner_response") }), queue_size: None }, DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("memory_log")}, source: Python(PythonSource { source: "scripts/memory_record.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/mofa/python/examples/memory"}: dora_coordinator::run: successfully spawned dataflow `019251ae-1e0c-7289-92ca-9f9f0a1339ba`
2024-10-03T09:30:51.825453Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("terminal-input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: Some("pip install -e ../../node-hub/terminal-input"), send_stdout_as: None, inputs: {DataId("context_memory"): Input { mapping: User(UserInputMapping { source: NodeId("memory-retrieval"), output: DataId("context_memory") }), queue_size: None }, DataId("memory_log"): Input { mapping: User(UserInputMapping { source: NodeId("memory-record"), output: DataId("memory_log") }), queue_size: None }, DataId("reasoner_response"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner-agent"), output: DataId("reasoner_response") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("memory-retrieval"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("context_memory")}, source: Python(PythonSource { source: "./scripts/memory_retrieval.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("reasoner-agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("context_memory"): Input { mapping: User(UserInputMapping { source: NodeId("memory-retrieval"), output: DataId("context_memory") }), queue_size: None }, DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("reasoner_response")}, source: Python(PythonSource { source: "scripts/reasoner_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("memory-record"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("reasoner_response"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner-agent"), output: DataId("reasoner_response") }), queue_size: None }, DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("memory_log")}, source: Python(PythonSource { source: "scripts/memory_record.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/mofa/python/examples/memory"}: dora_coordinator::run: successfully spawned dataflow `019251b7-c82f-782a-bef2-b519b2826c14`
2024-10-03T09:31:19.045373Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("terminal-input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: Some("pip install -e ../../node-hub/terminal-input"), send_stdout_as: None, inputs: {DataId("context_memory"): Input { mapping: User(UserInputMapping { source: NodeId("memory-retrieval"), output: DataId("context_memory") }), queue_size: None }, DataId("memory_log"): Input { mapping: User(UserInputMapping { source: NodeId("memory-record"), output: DataId("memory_log") }), queue_size: None }, DataId("reasoner_response"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner-agent"), output: DataId("reasoner_response") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("memory-retrieval"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("context_memory")}, source: Python(PythonSource { source: "./scripts/memory_retrieval.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("reasoner-agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("context_memory"): Input { mapping: User(UserInputMapping { source: NodeId("memory-retrieval"), output: DataId("context_memory") }), queue_size: None }, DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("reasoner_response")}, source: Python(PythonSource { source: "scripts/reasoner_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("memory-record"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("reasoner_response"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner-agent"), output: DataId("reasoner_response") }), queue_size: None }, DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("memory_log")}, source: Python(PythonSource { source: "scripts/memory_record.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/mofa/python/examples/memory"}: dora_coordinator::run: successfully spawned dataflow `019251b8-3283-767a-94cf-8d5203b10c7c`
2024-10-03T09:31:29.086408Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("terminal-input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: Some("pip install -e ../../node-hub/terminal-input"), send_stdout_as: None, inputs: {DataId("context_memory"): Input { mapping: User(UserInputMapping { source: NodeId("memory-retrieval"), output: DataId("context_memory") }), queue_size: None }, DataId("memory_log"): Input { mapping: User(UserInputMapping { source: NodeId("memory-record"), output: DataId("memory_log") }), queue_size: None }, DataId("reasoner_response"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner-agent"), output: DataId("reasoner_response") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("memory-retrieval"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("context_memory")}, source: Python(PythonSource { source: "./scripts/memory_retrieval.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("reasoner-agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("context_memory"): Input { mapping: User(UserInputMapping { source: NodeId("memory-retrieval"), output: DataId("context_memory") }), queue_size: None }, DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("reasoner_response")}, source: Python(PythonSource { source: "scripts/reasoner_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("memory-record"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("reasoner_response"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner-agent"), output: DataId("reasoner_response") }), queue_size: None }, DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("memory_log")}, source: Python(PythonSource { source: "scripts/memory_record.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/mofa/python/examples/memory"}: dora_coordinator::run: successfully spawned dataflow `019251b8-59bc-7eb9-9582-5a0cb21656a3`
2024-10-03T09:34:02.898063Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("terminal-input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: Some("pip install -e ../../node-hub/terminal-input"), send_stdout_as: None, inputs: {DataId("context_memory"): Input { mapping: User(UserInputMapping { source: NodeId("memory-retrieval"), output: DataId("context_memory") }), queue_size: None }, DataId("memory_log"): Input { mapping: User(UserInputMapping { source: NodeId("memory-record"), output: DataId("memory_log") }), queue_size: None }, DataId("reasoner_response"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner-agent"), output: DataId("reasoner_response") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("memory-retrieval"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("context_memory")}, source: Python(PythonSource { source: "./scripts/memory_retrieval.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("reasoner-agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("context_memory"): Input { mapping: User(UserInputMapping { source: NodeId("memory-retrieval"), output: DataId("context_memory") }), queue_size: None }, DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("reasoner_response")}, source: Python(PythonSource { source: "scripts/reasoner_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("memory-record"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("reasoner_response"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner-agent"), output: DataId("reasoner_response") }), queue_size: None }, DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("memory_log")}, source: Python(PythonSource { source: "scripts/memory_record.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/mofa/python/examples/memory"}: dora_coordinator::run: successfully spawned dataflow `019251ba-b290-7e1b-8b33-91696f27b36e`
2024-10-03T09:36:39.590098Z  INFO spawn_dataflow{dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: Deploy { machine: None }, nodes: [Node { id: NodeId("terminal-input"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: None, path: Some("dynamic"), args: None, build: Some("pip install -e ../../node-hub/terminal-input"), send_stdout_as: None, inputs: {DataId("context_memory"): Input { mapping: User(UserInputMapping { source: NodeId("memory-retrieval"), output: DataId("context_memory") }), queue_size: None }, DataId("memory_log"): Input { mapping: User(UserInputMapping { source: NodeId("memory-record"), output: DataId("memory_log") }), queue_size: None }, DataId("reasoner_response"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner-agent"), output: DataId("reasoner_response") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("memory-retrieval"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("context_memory")}, source: Python(PythonSource { source: "./scripts/memory_retrieval.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("reasoner-agent"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("context_memory"): Input { mapping: User(UserInputMapping { source: NodeId("memory-retrieval"), output: DataId("context_memory") }), queue_size: None }, DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("reasoner_response")}, source: Python(PythonSource { source: "scripts/reasoner_agent.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }, Node { id: NodeId("memory-record"), name: None, description: None, env: None, deploy: Deploy { machine: None }, operators: None, custom: None, operator: Some(SingleOperatorDefinition { id: None, config: OperatorConfig { name: None, description: None, inputs: {DataId("reasoner_response"): Input { mapping: User(UserInputMapping { source: NodeId("reasoner-agent"), output: DataId("reasoner_response") }), queue_size: None }, DataId("task"): Input { mapping: User(UserInputMapping { source: NodeId("terminal-input"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("memory_log")}, source: Python(PythonSource { source: "scripts/memory_record.py", conda_env: None }), build: None, send_stdout_as: None } }), path: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {} }] } working_dir="/Users/chenzi/project/zcbc/mofa/python/examples/memory"}: dora_coordinator::run: successfully spawned dataflow `019251bd-16a4-7bc0-930d-d043ec920f6a`
